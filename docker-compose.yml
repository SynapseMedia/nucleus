version: '3'
services:
  watchit-ipfs:
    image: ipfs/go-ipfs:v0.10.0
    restart: unless-stopped
    entrypoint: ["/scripts/init.sh"]
    networks:
      - watchit
    environment:
      - IPFS_PROFILE=server
      - IPFS_PATH=/ipfsdata
    volumes:
      - "${IPFS_DATA}:/ipfsdata"
      - ./peering/:/peering
      - ./scripts:/scripts
    ports:
      - "0.0.0.0:8080:8080/tcp"
      - "0.0.0.0:4001:4001/tcp"
      - "0.0.0.0:4001:4001/udp"
      - "127.0.0.1:5001:5001"

  watchit-cli:
    build: .
    image: gmena/cli:v0.1.1
    container_name: watchit-cli
    networks:
      - watchit
    links:
      - "watchit-mongodb:mongodb"
      - "watchit-ipfs:ipfs"
    volumes:
      - .:/data/watchit
      - /data/watchit/node_modules
      - "${RUNTIME_DIRECTORY}:/multimedia"
    env_file:
      - .env
    depends_on:
      - watchit-mongodb
      - watchit-ipfs
      - watchit-orbitdb-api

  watchit-http:
    build: .
    container_name: watchit-http
    command: [ "flask", "run", "--host=0.0.0.0" ]
    networks:
      - watchit
    links:
      - "watchit-mongodb:mongodb"
      - "watchit-ipfs:ipfs"
    volumes:
      - .:/data/watchit
    environment:
      FLASK_ENV: 'development'
      FLASK_APP: '/data/watchit/src/http/main.py'
    depends_on:
      - watchit-mongodb
      - watchit-ipfs
    ports:
      - "5000:5000"

  watchit-mongodb:
    image: mongo
    container_name: watchit-mongo
    restart: unless-stopped
    networks:
      - watchit
    ports:
      - "27017:27017"

  watchit-orbitdb-api:
    image: phillmac/orbit-db-http-api-dev:debug
    restart: unless-stopped
    command: [ "node", "--trace-warnings", "src/cli.js", "api", "--debug" ]
    networks:
      - watchit
    environment:
      IPFS_HOST: 'watchit-ipfs'
      ORBITDB_DIR: '/orbitdb'
      FORCE_HTTP1: 'true'
      ANNOUNCE_DBS: 'true'
      LOG: 'DEBUG'
    depends_on:
      - watchit-ipfs
    ports:
      - 127.0.0.1:3001:3000/tcp
    volumes:
      - ./orbitdb:/orbitdb

  watchit-db-monitor:
    image: peelvalley/ipfs-cli
    restart: unless-stopped
    entrypoint: [ "bash" ]
    command: [ "-c", "source /scripts/functions.sh && monitor_ipns_dbs" ]
    networks:
      - watchit
    environment:
      IPFS_RESOLVE_TIMEOUT: "15m"
      IPFS_CAT_TIMEOUT: "5m"
      IPFS_HTTP_GATEWAY: "http://watchit-ipfs:8080"
      ORBIT_DB_HOST: "http://watchit-orbitdb-api:3000"
      ORBIT_DB_ENTRIES_TIMEOUT: 30000
      IPFS_API_HOST: "watchit_ipfs"
      IPNS_DB_NAME: "wt.movies.db"
      DB_MONITOR_WAIT: "15m"
      DB_MONITOR_IPNS: "${MONITOR_CID}"
      OPEN_FETCH_DB_CONTENTS: "TRUE"
    depends_on:
      - watchit-orbitdb-api

  watchit-certbot:
    image: peelvalley/certbot
    restart: unless-stopped
    networks:
      - proxy
    environment:
      NOTIFY_EMAIL: 'dev@zorrillos.com'
    volumes:
      - cert-data:/etc/letsencrypt
      - ./proxy/certbot/domains:/opt/certbot/domains/

  watchit-reverse-proxy:
    image: peelvalley/proxy
    restart: unless-stopped
    networks:
      - watchit
      - proxy
    links:
      - "watchit-certbot:certbot"
      - "watchit-ipfs:ipfs"
    ports:
      - "0.0.0.0:80:80"
      - "0.0.0.0:443:443"
      - "0.0.0.0:4002:4002"
    volumes:
      - ./proxy/reverse-proxy/conf.d.available:/etc/nginx/conf.d.available
      - ./proxy/reverse-proxy/conf.d.enabled:/etc/nginx/conf.d.enabled
      - proxy-conf:/etc/nginx/conf.d
      - cert-data:/etc/letsencrypt
      - proxy-cache:/cache/nginx

networks:
  watchit:
  proxy:
volumes:
  cert-data:
  proxy-cache:
  proxy-conf:
    driver_opts:
      type: tmpfs
      device: tmpfs